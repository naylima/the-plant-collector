import {
  require_prop_types
} from "./chunk-QV4XRCI3.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/globalthis/implementation.browser.js
var require_implementation_browser = __commonJS({
  "node_modules/globalthis/implementation.browser.js"(exports, module) {
    "use strict";
    if (typeof self !== "undefined") {
      module.exports = self;
    } else if (typeof window !== "undefined") {
      module.exports = window;
    } else {
      module.exports = Function("return this")();
    }
  }
});

// node_modules/globalthis/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/globalthis/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation_browser();
    module.exports = function getPolyfill() {
      if (typeof global !== "object" || !global || global.Math !== Math || global.Array !== Array) {
        return implementation;
      }
      return global;
    };
  }
});

// node_modules/qj/lib/index.js
var require_lib = __commonJS({
  "node_modules/qj/lib/index.js"(exports, module) {
    (function() {
      var QJ, rreturn, rtrim;
      QJ = function(selector) {
        if (QJ.isDOMElement(selector)) {
          return selector;
        }
        return document.querySelectorAll(selector);
      };
      QJ.isDOMElement = function(el) {
        return el && el.nodeName != null;
      };
      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
      QJ.trim = function(text) {
        if (text === null) {
          return "";
        } else {
          return (text + "").replace(rtrim, "");
        }
      };
      rreturn = /\r/g;
      QJ.val = function(el, val) {
        var ret;
        if (arguments.length > 1) {
          return el.value = val;
        } else {
          ret = el.value;
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } else {
            if (ret === null) {
              return "";
            } else {
              return ret;
            }
          }
        }
      };
      QJ.preventDefault = function(eventObject) {
        if (typeof eventObject.preventDefault === "function") {
          eventObject.preventDefault();
          return;
        }
        eventObject.returnValue = false;
        return false;
      };
      QJ.normalizeEvent = function(e) {
        var original;
        original = e;
        e = {
          which: original.which != null ? original.which : void 0,
          target: original.target || original.srcElement,
          preventDefault: function() {
            return QJ.preventDefault(original);
          },
          originalEvent: original,
          data: original.data || original.detail
        };
        if (e.which == null) {
          e.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return e;
      };
      QJ.on = function(element, eventName, callback) {
        var el, i, j, len, len1, multEventName, originalCallback, ref;
        if (element.length) {
          for (i = 0, len = element.length; i < len; i++) {
            el = element[i];
            QJ.on(el, eventName, callback);
          }
          return;
        }
        if (eventName.match(" ")) {
          ref = eventName.split(" ");
          for (j = 0, len1 = ref.length; j < len1; j++) {
            multEventName = ref[j];
            QJ.on(element, multEventName, callback);
          }
          return;
        }
        originalCallback = callback;
        callback = function(e) {
          e = QJ.normalizeEvent(e);
          return originalCallback(e);
        };
        if (element.addEventListener) {
          return element.addEventListener(eventName, callback, false);
        }
        if (element.attachEvent) {
          eventName = "on" + eventName;
          return element.attachEvent(eventName, callback);
        }
        element["on" + eventName] = callback;
      };
      QJ.addClass = function(el, className) {
        var e;
        if (el.length) {
          return function() {
            var i, len, results;
            results = [];
            for (i = 0, len = el.length; i < len; i++) {
              e = el[i];
              results.push(QJ.addClass(e, className));
            }
            return results;
          }();
        }
        if (el.classList) {
          return el.classList.add(className);
        } else {
          return el.className += " " + className;
        }
      };
      QJ.hasClass = function(el, className) {
        var e, hasClass, i, len;
        if (el.length) {
          hasClass = true;
          for (i = 0, len = el.length; i < len; i++) {
            e = el[i];
            hasClass = hasClass && QJ.hasClass(e, className);
          }
          return hasClass;
        }
        if (el.classList) {
          return el.classList.contains(className);
        } else {
          return new RegExp("(^| )" + className + "( |$)", "gi").test(el.className);
        }
      };
      QJ.removeClass = function(el, className) {
        var cls, e, i, len, ref, results;
        if (el.length) {
          return function() {
            var i2, len2, results2;
            results2 = [];
            for (i2 = 0, len2 = el.length; i2 < len2; i2++) {
              e = el[i2];
              results2.push(QJ.removeClass(e, className));
            }
            return results2;
          }();
        }
        if (el.classList) {
          ref = className.split(" ");
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            cls = ref[i];
            results.push(el.classList.remove(cls));
          }
          return results;
        } else {
          return el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
        }
      };
      QJ.toggleClass = function(el, className, bool) {
        var e;
        if (el.length) {
          return function() {
            var i, len, results;
            results = [];
            for (i = 0, len = el.length; i < len; i++) {
              e = el[i];
              results.push(QJ.toggleClass(e, className, bool));
            }
            return results;
          }();
        }
        if (bool) {
          if (!QJ.hasClass(el, className)) {
            return QJ.addClass(el, className);
          }
        } else {
          return QJ.removeClass(el, className);
        }
      };
      QJ.append = function(el, toAppend) {
        var e;
        if (el.length) {
          return function() {
            var i, len, results;
            results = [];
            for (i = 0, len = el.length; i < len; i++) {
              e = el[i];
              results.push(QJ.append(e, toAppend));
            }
            return results;
          }();
        }
        return el.insertAdjacentHTML("beforeend", toAppend);
      };
      QJ.find = function(el, selector) {
        if (el instanceof NodeList || el instanceof Array) {
          el = el[0];
        }
        return el.querySelectorAll(selector);
      };
      QJ.trigger = function(el, name, data) {
        var e, error, ev;
        try {
          ev = new CustomEvent(name, {
            detail: data
          });
        } catch (error2) {
          e = error2;
          ev = document.createEvent("CustomEvent");
          if (ev.initCustomEvent) {
            ev.initCustomEvent(name, true, true, data);
          } else {
            ev.initEvent(name, true, true, data);
          }
        }
        return el.dispatchEvent(ev);
      };
      module.exports = QJ;
    }).call(exports);
  }
});

// node_modules/payment/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/payment/lib/index.js"(exports, module) {
    (function() {
      var Payment2, QJ, cardFromNumber, cardFromType, cards, cursorSafeAssignValue, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, formatMonthExpiry, globalThis, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictCombinedExpiry, restrictExpiry, restrictMonthExpiry, restrictNumeric, restrictYearExpiry, setCardType, indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i;
        }
        return -1;
      };
      globalThis = require_polyfill()();
      QJ = require_lib();
      defaultFormat = /(\d{1,4})/g;
      cards = [
        {
          type: "amex",
          pattern: /^3[47]/,
          format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
          length: [15],
          cvcLength: [4],
          luhn: true
        },
        {
          type: "dankort",
          pattern: /^5019/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "dinersclub",
          pattern: /^(36|38|30[0-5])/,
          format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
          length: [14],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "discover",
          pattern: /^(6011|65|64[4-9]|622)/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "elo",
          pattern: /^401178|^401179|^431274|^438935|^451416|^457393|^457631|^457632|^504175|^627780|^636297|^636369|^636368|^(506699|5067[0-6]\d|50677[0-8])|^(50900\d|5090[1-9]\d|509[1-9]\d{2})|^65003[1-3]|^(65003[5-9]|65004\d|65005[0-1])|^(65040[5-9]|6504[1-3]\d)|^(65048[5-9]|65049\d|6505[0-2]\d|65053[0-8])|^(65054[1-9]|6505[5-8]\d|65059[0-8])|^(65070\d|65071[0-8])|^65072[0-7]|^(65090[1-9]|65091\d|650920)|^(65165[2-9]|6516[6-7]\d)|^(65500\d|65501\d)|^(65502[1-9]|6550[3-4]\d|65505[0-8])|^(65092[1-9]|65097[0-8])/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "hipercard",
          pattern: /^(384100|384140|384160|606282|637095|637568|60(?!11))/,
          format: defaultFormat,
          length: [14, 15, 16, 17, 18, 19],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "jcb",
          pattern: /^(308[8-9]|309[0-3]|3094[0]{4}|309[6-9]|310[0-2]|311[2-9]|3120|315[8-9]|333[7-9]|334[0-9]|35)/,
          format: defaultFormat,
          length: [16, 19],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "laser",
          pattern: /^(6706|6771|6709)/,
          format: defaultFormat,
          length: [16, 17, 18, 19],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "maestro",
          pattern: /^(50|5[6-9]|6007|6220|6304|6703|6708|6759|676[1-3])/,
          format: defaultFormat,
          length: [12, 13, 14, 15, 16, 17, 18, 19],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "mastercard",
          pattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "mir",
          pattern: /^220[0-4][0-9][0-9]\d{10}$/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "troy",
          pattern: /^9792/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "unionpay",
          pattern: /^62/,
          format: defaultFormat,
          length: [16, 17, 18, 19],
          cvcLength: [3],
          luhn: false
        },
        {
          type: "visaelectron",
          pattern: /^4(026|17500|405|508|844|91[37])/,
          format: defaultFormat,
          length: [16],
          cvcLength: [3],
          luhn: true
        },
        {
          type: "visa",
          pattern: /^4/,
          format: defaultFormat,
          length: [13, 16],
          cvcLength: [3],
          luhn: true
        }
      ];
      cardFromNumber = function(num) {
        var card, foundCard, j, len, match;
        num = (num + "").replace(/\D/g, "");
        foundCard = void 0;
        for (j = 0, len = cards.length; j < len; j++) {
          card = cards[j];
          if (match = num.match(card.pattern)) {
            if (!foundCard || match[0].length > foundCard[1][0].length) {
              foundCard = [card, match];
            }
          }
        }
        return foundCard && foundCard[0];
      };
      cardFromType = function(type) {
        var card, j, len;
        for (j = 0, len = cards.length; j < len; j++) {
          card = cards[j];
          if (card.type === type) {
            return card;
          }
        }
      };
      luhnCheck = function(num) {
        var digit, digits, j, len, odd, sum;
        odd = true;
        sum = 0;
        digits = (num + "").split("").reverse();
        for (j = 0, len = digits.length; j < len; j++) {
          digit = digits[j];
          digit = parseInt(digit, 10);
          if (odd = !odd) {
            digit *= 2;
          }
          if (digit > 9) {
            digit -= 9;
          }
          sum += digit;
        }
        return sum % 10 === 0;
      };
      hasTextSelected = function(target) {
        var e, ref;
        try {
          if (target.selectionStart != null && target.selectionStart !== target.selectionEnd) {
            return true;
          }
          if ((typeof document !== "undefined" && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
            if (document.selection.createRange().text) {
              return true;
            }
          }
        } catch (error) {
          e = error;
        }
        return false;
      };
      reFormatCardNumber = function(e) {
        return setTimeout(function(_this) {
          return function() {
            var target, value;
            target = e.target;
            value = QJ.val(target);
            value = Payment2.fns.formatCardNumber(value);
            cursorSafeAssignValue(target, value);
            return QJ.trigger(target, "change");
          };
        }(this));
      };
      formatCardNumber = function(maxLength) {
        return function(e) {
          var card, digit, i, j, len, length, re, target, upperLength, upperLengths, value;
          if (e.which > 0) {
            digit = String.fromCharCode(e.which);
            value = QJ.val(e.target) + digit;
          } else {
            digit = e.data;
            value = QJ.val(e.target);
          }
          if (!/^\d+$/.test(digit)) {
            return;
          }
          target = e.target;
          card = cardFromNumber(value);
          length = value.replace(/\D/g, "").length;
          upperLengths = [16];
          if (card) {
            upperLengths = card.length;
          }
          if (maxLength) {
            upperLengths = upperLengths.filter(function(x) {
              return x <= maxLength;
            });
          }
          for (i = j = 0, len = upperLengths.length; j < len; i = ++j) {
            upperLength = upperLengths[i];
            if (length >= upperLength && upperLengths[i + 1]) {
              continue;
            }
            if (length >= upperLength) {
              return;
            }
          }
          if (hasTextSelected(target)) {
            return;
          }
          if (card && card.type === "amex") {
            re = /^(\d{4}|\d{4}\s\d{6})$/;
          } else {
            re = /(?:^|\s)(\d{4})$/;
          }
          value = value.substring(0, value.length - 1);
          if (re.test(value)) {
            e.preventDefault();
            QJ.val(target, value + " " + digit);
            return QJ.trigger(target, "change");
          }
        };
      };
      formatBackCardNumber = function(e) {
        var target, value;
        target = e.target;
        value = QJ.val(target);
        if (e.meta) {
          return;
        }
        if (e.which !== 8) {
          return;
        }
        if (hasTextSelected(target)) {
          return;
        }
        if (/\d\s$/.test(value)) {
          e.preventDefault();
          QJ.val(target, value.replace(/\d\s$/, ""));
          return QJ.trigger(target, "change");
        } else if (/\s\d?$/.test(value)) {
          e.preventDefault();
          QJ.val(target, value.replace(/\s\d?$/, ""));
          return QJ.trigger(target, "change");
        }
      };
      formatExpiry = function(e) {
        var digit, target, val;
        target = e.target;
        if (e.which > 0) {
          digit = String.fromCharCode(e.which);
          val = QJ.val(target) + digit;
        } else {
          digit = e.data;
          val = QJ.val(target);
        }
        if (!/^\d+$/.test(digit)) {
          return;
        }
        if (/^\d$/.test(val) && (val !== "0" && val !== "1")) {
          e.preventDefault();
          QJ.val(target, "0" + val + " / ");
          return QJ.trigger(target, "change");
        } else if (/^\d\d$/.test(val)) {
          e.preventDefault();
          QJ.val(target, val + " / ");
          return QJ.trigger(target, "change");
        }
      };
      formatMonthExpiry = function(e) {
        var digit, target, val;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
          return;
        }
        target = e.target;
        val = QJ.val(target) + digit;
        if (/^\d$/.test(val) && (val !== "0" && val !== "1")) {
          e.preventDefault();
          QJ.val(target, "0" + val);
          return QJ.trigger(target, "change");
        } else if (/^\d\d$/.test(val)) {
          e.preventDefault();
          QJ.val(target, "" + val);
          return QJ.trigger(target, "change");
        }
      };
      formatForwardExpiry = function(e) {
        var digit, target, val;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
          return;
        }
        target = e.target;
        val = QJ.val(target);
        if (/^\d\d$/.test(val)) {
          QJ.val(target, val + " / ");
          return QJ.trigger(target, "change");
        }
      };
      formatForwardSlash = function(e) {
        var slash, target, val;
        slash = String.fromCharCode(e.which);
        if (slash !== "/") {
          return;
        }
        target = e.target;
        val = QJ.val(target);
        if (/^\d$/.test(val) && val !== "0") {
          QJ.val(target, "0" + val + " / ");
          return QJ.trigger(target, "change");
        }
      };
      formatBackExpiry = function(e) {
        var target, value;
        if (e.metaKey) {
          return;
        }
        target = e.target;
        value = QJ.val(target);
        if (e.which !== 8) {
          return;
        }
        if (hasTextSelected(target)) {
          return;
        }
        if (/\d(\s|\/)+$/.test(value)) {
          e.preventDefault();
          QJ.val(target, value.replace(/\d(\s|\/)*$/, ""));
          return QJ.trigger(target, "change");
        } else if (/\s\/\s?\d?$/.test(value)) {
          e.preventDefault();
          QJ.val(target, value.replace(/\s\/\s?\d?$/, ""));
          return QJ.trigger(target, "change");
        }
      };
      restrictNumeric = function(e) {
        var input;
        if (e.metaKey || e.ctrlKey) {
          return true;
        }
        if (e.which === 32) {
          return e.preventDefault();
        }
        if (e.which === 0) {
          return true;
        }
        if (e.which < 33) {
          return true;
        }
        input = String.fromCharCode(e.which);
        if (!/[\d\s]/.test(input)) {
          return e.preventDefault();
        }
      };
      restrictCardNumber = function(maxLength) {
        return function(e) {
          var card, digit, length, target, value;
          target = e.target;
          digit = String.fromCharCode(e.which);
          if (!/^\d+$/.test(digit)) {
            return;
          }
          if (hasTextSelected(target)) {
            return;
          }
          value = (QJ.val(target) + digit).replace(/\D/g, "");
          card = cardFromNumber(value);
          length = 16;
          if (card) {
            length = card.length[card.length.length - 1];
          }
          if (maxLength) {
            length = Math.min(length, maxLength);
          }
          if (!(value.length <= length)) {
            return e.preventDefault();
          }
        };
      };
      restrictExpiry = function(e, length) {
        var digit, target, value;
        target = e.target;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
          return;
        }
        if (hasTextSelected(target)) {
          return;
        }
        value = QJ.val(target) + digit;
        value = value.replace(/\D/g, "");
        if (value.length > length) {
          return e.preventDefault();
        }
      };
      restrictCombinedExpiry = function(e) {
        return restrictExpiry(e, 6);
      };
      restrictMonthExpiry = function(e) {
        return restrictExpiry(e, 2);
      };
      restrictYearExpiry = function(e) {
        return restrictExpiry(e, 4);
      };
      restrictCVC = function(e) {
        var digit, target, val;
        target = e.target;
        digit = String.fromCharCode(e.which);
        if (!/^\d+$/.test(digit)) {
          return;
        }
        if (hasTextSelected(target)) {
          return;
        }
        val = QJ.val(target) + digit;
        if (!(val.length <= 4)) {
          return e.preventDefault();
        }
      };
      setCardType = function(e) {
        var allTypes, card, cardType, target, val;
        target = e.target;
        val = QJ.val(target);
        cardType = Payment2.fns.cardType(val) || "unknown";
        if (!QJ.hasClass(target, cardType)) {
          allTypes = function() {
            var j, len, results;
            results = [];
            for (j = 0, len = cards.length; j < len; j++) {
              card = cards[j];
              results.push(card.type);
            }
            return results;
          }();
          QJ.removeClass(target, "unknown");
          QJ.removeClass(target, allTypes.join(" "));
          QJ.addClass(target, cardType);
          QJ.toggleClass(target, "identified", cardType !== "unknown");
          return QJ.trigger(target, "payment.cardType", cardType);
        }
      };
      cursorSafeAssignValue = function(target, value) {
        var selectionEnd;
        selectionEnd = target.selectionEnd;
        QJ.val(target, value);
        if (selectionEnd) {
          return target.selectionEnd = selectionEnd;
        }
      };
      Payment2 = function() {
        function Payment3() {
        }
        Payment3.J = QJ;
        Payment3.fns = {
          cardExpiryVal: function(value) {
            var month, prefix, ref, year;
            value = value.replace(/\s/g, "");
            ref = value.split("/", 2), month = ref[0], year = ref[1];
            if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
              prefix = new Date().getFullYear();
              prefix = prefix.toString().slice(0, 2);
              year = prefix + year;
            }
            month = parseInt(month, 10);
            year = parseInt(year, 10);
            return {
              month,
              year
            };
          },
          validateCardNumber: function(num) {
            var card, ref;
            num = (num + "").replace(/\s+|-/g, "");
            if (!/^\d+$/.test(num)) {
              return false;
            }
            card = cardFromNumber(num);
            if (!card) {
              return false;
            }
            return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num));
          },
          validateCardExpiry: function(month, year) {
            var currentTime, expiry, prefix, ref, ref1;
            if (typeof month === "object" && "month" in month) {
              ref = month, month = ref.month, year = ref.year;
            } else if (typeof month === "string" && indexOf.call(month, "/") >= 0) {
              ref1 = Payment3.fns.cardExpiryVal(month), month = ref1.month, year = ref1.year;
            }
            if (!(month && year)) {
              return false;
            }
            month = QJ.trim(month);
            year = QJ.trim(year);
            if (!/^\d+$/.test(month)) {
              return false;
            }
            if (!/^\d+$/.test(year)) {
              return false;
            }
            month = parseInt(month, 10);
            if (!(month && month <= 12)) {
              return false;
            }
            if (year.length === 2) {
              prefix = new Date().getFullYear();
              prefix = prefix.toString().slice(0, 2);
              year = prefix + year;
            }
            expiry = new Date(year, month);
            currentTime = new Date();
            expiry.setMonth(expiry.getMonth() - 1);
            expiry.setMonth(expiry.getMonth() + 1, 1);
            return expiry > currentTime;
          },
          validateCardCVC: function(cvc, type) {
            var ref, ref1;
            cvc = QJ.trim(cvc);
            if (!/^\d+$/.test(cvc)) {
              return false;
            }
            if (type && cardFromType(type)) {
              return ref = cvc.length, indexOf.call((ref1 = cardFromType(type)) != null ? ref1.cvcLength : void 0, ref) >= 0;
            } else {
              return cvc.length >= 3 && cvc.length <= 4;
            }
          },
          cardType: function(num) {
            var ref;
            if (!num) {
              return null;
            }
            return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null;
          },
          formatCardNumber: function(num) {
            var card, groups, ref, upperLength;
            card = cardFromNumber(num);
            if (!card) {
              return num;
            }
            upperLength = card.length[card.length.length - 1];
            num = num.replace(/\D/g, "");
            num = num.slice(0, upperLength);
            if (card.format.global) {
              return (ref = num.match(card.format)) != null ? ref.join(" ") : void 0;
            } else {
              groups = card.format.exec(num);
              if (groups == null) {
                return;
              }
              groups.shift();
              groups = groups.filter(function(n) {
                return n;
              });
              return groups.join(" ");
            }
          }
        };
        Payment3.restrictNumeric = function(el) {
          QJ.on(el, "keypress", restrictNumeric);
          return QJ.on(el, "input", restrictNumeric);
        };
        Payment3.cardExpiryVal = function(el) {
          return Payment3.fns.cardExpiryVal(QJ.val(el));
        };
        Payment3.formatCardCVC = function(el) {
          Payment3.restrictNumeric(el);
          QJ.on(el, "keypress", restrictCVC);
          QJ.on(el, "input", restrictCVC);
          return el;
        };
        Payment3.formatCardExpiry = function(el) {
          var month, year;
          Payment3.restrictNumeric(el);
          if (el.length && el.length === 2) {
            month = el[0], year = el[1];
            this.formatCardExpiryMultiple(month, year);
          } else {
            QJ.on(el, "keypress", restrictCombinedExpiry);
            QJ.on(el, "keypress", formatExpiry);
            QJ.on(el, "keypress", formatForwardSlash);
            QJ.on(el, "keypress", formatForwardExpiry);
            QJ.on(el, "keydown", formatBackExpiry);
            QJ.on(el, "input", formatExpiry);
          }
          return el;
        };
        Payment3.formatCardExpiryMultiple = function(month, year) {
          QJ.on(month, "keypress", restrictMonthExpiry);
          QJ.on(month, "keypress", formatMonthExpiry);
          QJ.on(month, "input", formatMonthExpiry);
          QJ.on(year, "keypress", restrictYearExpiry);
          return QJ.on(year, "input", restrictYearExpiry);
        };
        Payment3.formatCardNumber = function(el, maxLength) {
          Payment3.restrictNumeric(el);
          QJ.on(el, "keypress", restrictCardNumber(maxLength));
          QJ.on(el, "keypress", formatCardNumber(maxLength));
          QJ.on(el, "keydown", formatBackCardNumber);
          QJ.on(el, "keyup blur", setCardType);
          QJ.on(el, "blur", formatCardNumber(maxLength));
          QJ.on(el, "paste", reFormatCardNumber);
          QJ.on(el, "input", formatCardNumber(maxLength));
          return el;
        };
        Payment3.getCardArray = function() {
          return cards;
        };
        Payment3.setCardArray = function(cardArray) {
          cards = cardArray;
          return true;
        };
        Payment3.addToCardArray = function(cardObject) {
          return cards.push(cardObject);
        };
        Payment3.removeFromCardArray = function(type) {
          var key, value;
          for (key in cards) {
            value = cards[key];
            if (value.type === type) {
              cards.splice(key, 1);
            }
          }
          return true;
        };
        return Payment3;
      }();
      module.exports = Payment2;
      globalThis.Payment = Payment2;
    }).call(exports);
  }
});

// node_modules/react-credit-cards/es/index.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_payment = __toESM(require_lib2());
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ReactCreditCards = function(_React$Component) {
  _inherits(ReactCreditCards2, _React$Component);
  var _super = _createSuper(ReactCreditCards2);
  function ReactCreditCards2(props) {
    var _this;
    _classCallCheck(this, ReactCreditCards2);
    _this = _super.call(this, props);
    _this.setCards();
    return _this;
  }
  _createClass(ReactCreditCards2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props, acceptedCards = _this$props.acceptedCards, callback = _this$props.callback, number = _this$props.number;
      if (prevProps.number !== number) {
        if (typeof callback === "function") {
          callback(this.options, import_payment.default.fns.validateCardNumber(number));
        }
      }
      if (prevProps.acceptedCards.toString() !== acceptedCards.toString()) {
        this.setCards();
      }
    }
  }, {
    key: "setCards",
    value: function setCards() {
      var acceptedCards = this.props.acceptedCards;
      var newCardArray = [];
      if (acceptedCards.length) {
        import_payment.default.getCardArray().forEach(function(d) {
          if (acceptedCards.indexOf(d.type) !== -1) {
            newCardArray.push(d);
          }
        });
      } else {
        newCardArray = newCardArray.concat(import_payment.default.getCardArray());
      }
      import_payment.default.setCardArray(newCardArray);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props, cvc = _this$props2.cvc, focused = _this$props2.focused, locale = _this$props2.locale, name = _this$props2.name, placeholders = _this$props2.placeholders;
      var number = this.number, expiry = this.expiry;
      return import_react.default.createElement("div", {
        key: "Cards",
        className: "rccs"
      }, import_react.default.createElement("div", {
        className: ["rccs__card", "rccs__card--".concat(this.issuer), focused === "cvc" && this.issuer !== "amex" ? "rccs__card--flipped" : ""].join(" ").trim()
      }, import_react.default.createElement("div", {
        className: "rccs__card--front"
      }, import_react.default.createElement("div", {
        className: "rccs__card__background"
      }), import_react.default.createElement("div", {
        className: "rccs__issuer"
      }), import_react.default.createElement("div", {
        className: ["rccs__cvc__front", focused === "cvc" ? "rccs--focused" : ""].join(" ").trim()
      }, cvc), import_react.default.createElement("div", {
        className: ["rccs__number", number.replace(/ /g, "").length > 16 ? "rccs__number--large" : "", focused === "number" ? "rccs--focused" : "", number.substr(0, 1) !== "\u2022" ? "rccs--filled" : ""].join(" ").trim()
      }, number), import_react.default.createElement("div", {
        className: ["rccs__name", focused === "name" ? "rccs--focused" : "", name ? "rccs--filled" : ""].join(" ").trim()
      }, name || placeholders.name), import_react.default.createElement("div", {
        className: ["rccs__expiry", focused === "expiry" ? "rccs--focused" : "", expiry.substr(0, 1) !== "\u2022" ? "rccs--filled" : ""].join(" ").trim()
      }, import_react.default.createElement("div", {
        className: "rccs__expiry__valid"
      }, locale.valid), import_react.default.createElement("div", {
        className: "rccs__expiry__value"
      }, expiry)), import_react.default.createElement("div", {
        className: "rccs__chip"
      })), import_react.default.createElement("div", {
        className: "rccs__card--back"
      }, import_react.default.createElement("div", {
        className: "rccs__card__background"
      }), import_react.default.createElement("div", {
        className: "rccs__stripe"
      }), import_react.default.createElement("div", {
        className: "rccs__signature"
      }), import_react.default.createElement("div", {
        className: ["rccs__cvc", focused === "cvc" ? "rccs--focused" : ""].join(" ").trim()
      }, cvc), import_react.default.createElement("div", {
        className: "rccs__issuer"
      }))));
    }
  }, {
    key: "issuer",
    get: function get() {
      var _this$props3 = this.props, issuer = _this$props3.issuer, preview = _this$props3.preview;
      return preview && issuer ? issuer.toLowerCase() : this.options.issuer;
    }
  }, {
    key: "number",
    get: function get() {
      var _this$props4 = this.props, number = _this$props4.number, preview = _this$props4.preview;
      var maxLength = preview ? 19 : this.options.maxLength;
      var nextNumber = typeof number === "number" ? number.toString() : number.replace(/[A-Za-z]| /g, "");
      if (isNaN(parseInt(nextNumber, 10)) && !preview) {
        nextNumber = "";
      }
      if (maxLength > 16) {
        maxLength = nextNumber.length <= 16 ? 16 : maxLength;
      }
      if (nextNumber.length > maxLength) {
        nextNumber = nextNumber.slice(0, maxLength);
      }
      while (nextNumber.length < maxLength) {
        nextNumber += "\u2022";
      }
      if (["amex", "dinersclub"].indexOf(this.issuer) !== -1) {
        var format = [0, 4, 10];
        var limit = [4, 6, 5];
        nextNumber = "".concat(nextNumber.substr(format[0], limit[0]), " ").concat(nextNumber.substr(format[1], limit[1]), " ").concat(nextNumber.substr(format[2], limit[2]));
      } else if (nextNumber.length > 16) {
        var _format = [0, 4, 8, 12];
        var _limit = [4, 7];
        nextNumber = "".concat(nextNumber.substr(_format[0], _limit[0]), " ").concat(nextNumber.substr(_format[1], _limit[0]), " ").concat(nextNumber.substr(_format[2], _limit[0]), " ").concat(nextNumber.substr(_format[3], _limit[1]));
      } else {
        for (var i = 1; i < maxLength / 4; i++) {
          var space_index = i * 4 + (i - 1);
          nextNumber = "".concat(nextNumber.slice(0, space_index), " ").concat(nextNumber.slice(space_index));
        }
      }
      return nextNumber;
    }
  }, {
    key: "expiry",
    get: function get() {
      var _this$props$expiry = this.props.expiry, expiry = _this$props$expiry === void 0 ? "" : _this$props$expiry;
      var date = typeof expiry === "number" ? expiry.toString() : expiry;
      var month = "";
      var year = "";
      if (date.indexOf("/") !== -1) {
        var _date$split = date.split("/");
        var _date$split2 = _slicedToArray(_date$split, 2);
        month = _date$split2[0];
        year = _date$split2[1];
      } else if (date.length) {
        month = date.substr(0, 2);
        year = date.substr(2, 6);
      }
      while (month.length < 2) {
        month += "\u2022";
      }
      if (year.length > 2) {
        year = year.substr(2, 4);
      }
      while (year.length < 2) {
        year += "\u2022";
      }
      return "".concat(month, "/").concat(year);
    }
  }, {
    key: "options",
    get: function get() {
      var number = this.props.number;
      var issuer = import_payment.default.fns.cardType(number) || "unknown";
      var maxLength = 16;
      if (issuer === "amex") {
        maxLength = 15;
      } else if (issuer === "dinersclub") {
        maxLength = 14;
      } else if (["hipercard", "mastercard", "visa"].indexOf(issuer) !== -1) {
        maxLength = 19;
      }
      return {
        issuer,
        maxLength
      };
    }
  }]);
  return ReactCreditCards2;
}(import_react.default.Component);
_defineProperty(ReactCreditCards, "propTypes", {
  acceptedCards: import_prop_types.default.array,
  callback: import_prop_types.default.func,
  cvc: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]).isRequired,
  expiry: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]).isRequired,
  focused: import_prop_types.default.string,
  issuer: import_prop_types.default.string,
  locale: import_prop_types.default.shape({
    valid: import_prop_types.default.string
  }),
  name: import_prop_types.default.string.isRequired,
  number: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]).isRequired,
  placeholders: import_prop_types.default.shape({
    name: import_prop_types.default.string
  }),
  preview: import_prop_types.default.bool
});
_defineProperty(ReactCreditCards, "defaultProps", {
  acceptedCards: [],
  locale: {
    valid: "valid thru"
  },
  placeholders: {
    name: "YOUR NAME HERE"
  },
  preview: false
});
var es_default = ReactCreditCards;
export {
  es_default as default
};
//# sourceMappingURL=react-credit-cards.js.map
