#!/usr/bin/env node

'use strict';
var fs = require('fs');
var getGlobalPackageInfo = require('./lib/index.js').getGlobalPackageInfo
  , getPackagesFromFile = require('./lib/index.js').getPackagesFromFile
  , linkPackage = require('./lib/index.js').linkPackage
  , unlinkPackage = require('./lib/index.js').unlinkPackage
  , installPackage = require('./lib/index.js').installPackage
  , saveInfoToFile = require('./lib/index.js').saveInfoToFile
  , reducePermision = require('./lib/index.js').reducePermision
  , chmod = require('./lib/index.js').chmod;

var cmd = process.argv[2]
  , packageName = process.argv[3]
  , option = process.argv[4]
  , packagePath = process.cwd() + '/package.json'
  , platform = process.platform;
var globalInfo = {}
  , packageInfo = {}
  , dep = {}
  , dev = {};

if ('install' !== cmd && 'uninstall' !== cmd) {
  showHelp();
} else {
  getGlobalPackageInfo()
    .then(data => {
      globalInfo = data;
      return getPackagesFromFile(packagePath);
    })
    .then(data => {
      packageInfo = data;
      packageInfo.dependencies = packageInfo.dependencies || {};
      packageInfo.devDependencies = packageInfo.devDependencies || {};
      dep = packageInfo.dependencies;
      dev = packageInfo.devDependencies;
      var packList = [];
      if (packageName) {
        packList = [packageName];
      } else {
        packList = Object.keys(dep).concat(Object.keys(dev));
      }
      var globalList = Object.keys(globalInfo);
      if ('install' === cmd) {
        if (packageName && !option) {
          showHelp();
          process.exit();
        }
        var installList = packList.filter(el => {
          return globalList.indexOf(el) === -1 ? true : false;
        });
        var len = installList.length;
        console.log(`=> there ${len > 1 ? 'are' : 'is'} ${len} ${len > 1 ? 'packages' : 'package'} need to be installed`);
        var installListPromise = installList.map(el => {
          return installPackage(el)
            .then(data => console.log(data))
            .catch(err => console.error(err));
        });
        return Promise.all(installListPromise);
      } else {
        return Promise.resolve();
      }
    })
    .then(data => {
      return getGlobalPackageInfo();
    })
    .then(data => {
      globalInfo = data;
      if (-1 === platform.indexOf('win')) {
        reducePermision();
      }
      if (cmd === 'install') {
        var linkList = [];
        if (packageName) {
          linkList = [packageName];
        } else {
          linkList = Object.keys(dep).concat(Object.keys(dev));
        }
        var linkListPromise = linkList.map(el => {
          return linkPackage(el)
            .then(data => console.log(data))
            .catch(err => console.error(err));
        });
        return Promise.all(linkListPromise);
      } else {
        if (!packageName || !option) {
          showHelp();
          process.exit();
        }
        return Promise.all([
          unlinkPackage(packageName)
          .then(data => console.log(data))
          .catch(err => console.error(err))
        ]);
      }
    })
    .then(data => {
      if (-1 === platform.indexOf('win')) {
        if (-1 !== fs.readdirSync(process.cwd()).indexOf('node_modules')) {
          return chmod();
        } else {
          return Promise.resolve();
        }
      } else {
        return Promise.resolve();
      }
    })
    .then(data => {
      if ('install' === cmd) {
        if (!packageName) {
          return Promise.resolve();
        } else {
          if ('--save' === option) {
            var version = '^' + globalInfo[packageName].version;
            packageInfo.dependencies[packageName] = version;
            return saveInfoToFile(packagePath, JSON.stringify(packageInfo));
          } else {
            var version = '^' + globalInfo[packageName].version;
            packageInfo.devDependencies[packageName] = version;
            return saveInfoToFile(packagePath, JSON.stringify(packageInfo));
          }
        }
      } else {
        if ('--save' === option) {
          delete packageInfo.dependencies[packageName];
          return saveInfoToFile(packagePath, JSON.stringify(packageInfo));
        } else {
          delete packageInfo.devDependencies[packageName];
          return saveInfoToFile(packagePath, JSON.stringify(packageInfo));
        }
      }
    })
    .then(data => {
      console.log('=> done!');
    })
    .catch(err => console.error(err));
}

function showHelp() {
  console.log('nlt install (maybe you need sudo permission)');
  console.log('nlt install <package> [--save || --save-dev]');
  console.log('nlt uninstall <package> [--save || --save-dev]');
}
