var fs = require('fs');
var exec = require('child_process').exec;

function getGlobalPackageInfo() {
  return new Promise((resolve, reject) => {
    exec('npm ls --global --depth=0 --json', (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        var jsonInfo = JSON.parse(stdout).dependencies;
        resolve(jsonInfo);
      }
    });
  });
}

function linkPackage(packageName) {
  return new Promise((resolve, reject) => {
    exec(`npm link ${packageName}`, (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        resolve(`=> [${packageName}] linked`);
      }
    });
  });
}

function unlinkPackage(packageName) {
  return new Promise((resolve, reject) => {
    exec(`npm unlink ${packageName}`, (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        resolve(`=> [${packageName}] uninstalled`);
      }
    });
  });
}

function installPackage(packageName) {
  return new Promise((resolve, reject) => {
    exec(`npm install ${packageName} -g`, (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        resolve(`=> [${packageName}] installed`);
      }
    });
  });
}

function getPackagesFromFile(filePath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath, 'utf8', (err, data) => {
      if (err) {
        reject(err);
      } else {
        var packageJson = JSON.parse(data);
        resolve(packageJson);
      }
    });
  });
}

function saveInfoToFile(filePath, packageJson) {
  return new Promise((resolve, reject) => {
    fs.writeFile(filePath, packageJson, err => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

function reducePermision() {
  var env = process.env
    , uid = parseInt(env['SUDO_UID'] || process.getuid(), 10)
    , gid = parseInt(env['SUDO_GID'] || process.getgid(), 10);
  process.setgid(gid);
  process.getuid(uid);
}

function chmod() {
  return new Promise((resolve, reject) => {
    exec('chmod -R 775 node_modules', (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        resolve(stdout);
      }
    });
  });
}

module.exports.getGlobalPackageInfo = getGlobalPackageInfo;
module.exports.getPackagesFromFile = getPackagesFromFile;
module.exports.linkPackage = linkPackage;
module.exports.unlinkPackage = unlinkPackage;
module.exports.installPackage = installPackage;
module.exports.saveInfoToFile = saveInfoToFile;
module.exports.reducePermision = reducePermision;
module.exports.chmod = chmod;
